import Trigger from "../model/Trigger";
import Action from "../model/Action";

/**
 * Enumeration containing data types that can be generated by triggers
 * and consumed by actions.
 */
export enum OperationDataType {
    Text = "TEXT",
    Image = "IMAGE",
    Video = "VIDEO"
}

export default class RuleExecution {
    /**
     * Checks if an action is compatible with a trigger. The compatibility is dictated by the type of outputs a trigger
     * emits and the types of inputs an action accepts.
     * @param actionId the id of the action
     * @param triggerId the id of the trigger
     */
    static async areActionTriggerCompatible(actionId: string, triggerId: string): Promise<boolean> {
        const action = await Action.findById(triggerId, "inputs -_id");
        const trigger = await Trigger.findById(triggerId, "outputs -_id");
        if (!trigger || !action)
            return false;
        // TODO: do we need to check for strict equality or is this enough?
        return action.inputs.every(dataType => trigger.outputs.includes(dataType));
    }
}